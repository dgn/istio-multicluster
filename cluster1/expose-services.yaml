apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: cross-network-gateway
  namespace: istio-system
spec:
  selector:
    istio: eastwestgateway
  servers:
    - port:
        number: 15443
        name: tls
        protocol: TLS
      tls:
        mode: AUTO_PASSTHROUGH
      hosts:
        - "*.local"
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: federation-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http-federation
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: istiod-federation
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - federation-gateway
  http:
  - route:
    - destination:
        port:
          number: 8188
        host: istiod
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istiod-federation
  namespace: istio-system
spec:
  host: istiod
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 8188
      tls:
        mode: DISABLE
---
# apiVersion: networking.istio.io/v1alpha3
# kind: EnvoyFilter
# metadata:
#   name: istio-multicluster-ingressgateway
#   namespace: istio-system
#   labels:
# spec:
#   workloadSelector:
#     labels:
#       istio: eastwestgateway
#   configPatches:
#   - applyTo: NETWORK_FILTER
#     match:
#       context: GATEWAY
#       listener:
#         portNumber: 15443
#         filterChain:
#           filter:
#             name: "envoy.filters.network.sni_cluster"
#     patch:
#       operation: INSERT_AFTER
#       value:
#         name: "envoy.filters.network.tcp_cluster_rewrite"
#         typed_config:
#           "@type": "type.googleapis.com/istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite"
#           cluster_pattern: "\\.federation.local$"
#           cluster_replacement: ".cluster.local"
# ---
# ## To ensure all traffic to globalDomainSuffix is using mTLS
# apiVersion: networking.istio.io/v1alpha3
# kind: DestinationRule
# metadata:
#   name: istio-multicluster-ingressgateway
#   namespace: istio-system
# spec:
#   host: "*.cluster1"
#   trafficPolicy:
#     tls:
#       mode: ISTIO_MUTUAL
